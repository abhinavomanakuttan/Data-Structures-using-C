Step 1: Start

Step 2: Define constants:MAX_SIZE = 100  // Maximum size of the stack

Step 3: Initialize: top = -1  // To keep track of the top of the stack
        stack[MAX_SIZE]  // Array to store stack elements
        (public)

Step 4:Function push(x): // define a function called push
      Step 4.1: If top == MAX_SIZE - 1:
          Step 4.1.1: Print "Stack is full. Overflow condition!"
          Step 4.1.2: Return
    
      Step 4.2: stack[++top]=x // top will increment the value and return it 

Step 5: Function pop():
    Step 5.1: If top == -1:
        Step 5.1.1: Print "Stack is empty. Underflow condition!"
        Step 5.1.2: Return -1

    Step 5.2:
    return stack[top--]  // Store stack[top] in a variable 
                            Decrement top by 1 
                            Return the stored value

Step 6: Function display():
    Step 6.1: If top == -1:
            Step 6.1.1: Print "Stack is empty."
            Step 6.1.2: Return
    Step 6.2 : Print "Stack elements are: "
            Step 6.2.1: Repeate the following steps unitl i<=top
            Step 6.2.2:print the stack
   


Step 7: Main program:
    Step 7.1: While true:
        Step 7.1 : Print "1. Push"
        Step 7.2 : Print "2. Pop"
        Step 7.3 : Print "3. Display"
        Step 7.4 : Print "4. Exit"
        Step 7.5 : Print "Enter your choice: "
        Step 7.6 : Read choice

        Step 7.7 : if choice is 1:
                 Step 7.7.1 : Print "Enter the element to push: "
                 Step 7.7.2 : Read x
                 Step 7.7.3 : Call push(x)

        Step 7.8 : Else If choice is 2:
                 Step 7.8.1 : Set x = pop()
                 Step 7.8.2 : If x is not -1:
                 Step 7.8.3 : Print "Popped element is: x"

        Step 7.9 : Else If choice is 3:
                Step 7.9.1 : Call display()

        Step 7.10 : Else If choice is 4:
            Step 7.10.1 : Exit the program

        Step 7.11: Else:
             Step 7.11.1 :Print "Invalid choice. Please try again."

Step 8 : Stop


